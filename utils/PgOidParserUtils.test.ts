// Copyright (c) 2023. Heusala Group Oy <info@hg.fi>. All rights reserved.

import { PgOidParserUtils } from "./PgOidParserUtils";
import { LogLevel } from "../../core/types/LogLevel";

const CORRECT_PAIRS : ([string, readonly (string|null)[]])[] = [

    [ '(,,)', [null, null, null]],
    [ '( , , )', [null, null, null]],
    [ '(,)', [null, null]],
    [ '( , )', [null, null]],
    [ '()', []],
    [ '(,,1)', [null, null, "1"]],

    [ '(1,2,3)', ["1", "2", "3"]],
    [ '(,2,3)', [null, "2", "3"]],
    [ '(1,,3)', ["1", null, "3"]],
    [ '(1,,"3")', ["1", null, "3"]],
    [ '(1,2,)', ["1", "2", null]],
    [ '(1,"2",)', ["1", "2", null]],
    [ '("1",2,)', ["1", "2", null]],
    [ '(1,2)', ["1", "2"]],
    [ '("1","2")', ["1", "2"]],
    [ '(1)', ["1"]],
    [ '("1")', ["1"]],
    [ '("(1)")', ["(1)"]],
    [ '(",1,")', [",1,"]],
    [ '("""1""")', ['"1"']],
    [ '("(1,2,3)")', ['(1,2,3)']],

    [ '  (1,2,3)', ["1", "2", "3"]],
    [ '  (,2,3)', [null, "2", "3"]],
    [ '  (1,,3)', ["1", null, "3"]],
    [ '  (1,,"3")', ["1", null, "3"]],
    [ '  (1,2,)', ["1", "2", null]],
    [ '  (1,"2",)', ["1", "2", null]],
    [ '  ("1",2,)', ["1", "2", null]],
    [ '  (1,2)', ["1", "2"]],
    [ '  ("1","2")', ["1", "2"]],
    [ '  (1)', ["1"]],
    [ '  ("1")', ["1"]],
    [ '  ()', []],
    [ '  ("(1)")', ["(1)"]],
    [ '  (",1,")', [",1,"]],
    [ '  ("""1""")', ['"1"']],

    [ '  (  1,2,3)', ["1", "2", "3"]],
    [ '  (  ,2,3)', [null, "2", "3"]],
    [ '  (  1,,3)', ["1", null, "3"]],
    [ '  (  1,,"3")', ["1", null, "3"]],
    [ '  (  1,2,)', ["1", "2", null]],
    [ '  (  1,"2",)', ["1", "2", null]],
    [ '  (  "1",2,)', ["1", "2", null]],
    [ '  (  1,2)', ["1", "2"]],
    [ '  (  "1","2")', ["1", "2"]],
    [ '  (  1)', ["1"]],
    [ '  (  "1")', ["1"]],
    [ '  (  )', []],
    [ '  (  "(1)")', ["(1)"]],
    [ '  (  ",1,")', [",1,"]],
    [ '  (  """1""")', ['"1"']],

    [ '  (  1  ,2,3)', ["1", "2", "3"]],
    [ '  (  ,  2,3)', [null, "2", "3"]],
    [ '  (  1  ,,3)', ["1", null, "3"]],
    [ '  (  1  ,,"3")', ["1", null, "3"]],
    [ '  (  1  ,2,)', ["1", "2", null]],
    [ '  (  1  ,"2",)', ["1", "2", null]],
    [ '  (  "1"  ,2,)', ["1", "2", null]],
    [ '  (  1  ,2)', ["1", "2"]],
    [ '  (  "1"  ,"2")', ["1", "2"]],
    [ '  (  1  )', ["1"]],
    [ '  (  "1"  )', ["1"]],
    [ '  (  )  ', []],
    [ '  (  "(1)"  )', ["(1)"]],
    [ '  (  ",1,"  )', [",1,"]],
    [ '  (  """1"""  )', ['"1"']],

    [ '  (  1  ,  2,3)', ["1", "2", "3"]],
    [ '  (  ,  2  ,3)', [null, "2", "3"]],
    [ '  (  1  ,  ,3)', ["1", null, "3"]],
    [ '  (  1  ,  ,"3")', ["1", null, "3"]],
    [ '  (  1  ,  2,)', ["1", "2", null]],
    [ '  (  1  ,  "2",)', ["1", "2", null]],
    [ '  (  "1"  ,  2,)', ["1", "2", null]],
    [ '  (  1  ,  2)', ["1", "2"]],
    [ '  (  "1"  ,  "2")', ["1", "2"]],
    [ '  (  1  )  ', ["1"]],
    [ '  (  "1"  )  ', ["1"]],

    [ '  (  1  ,  2  ,3)', ["1", "2", "3"]],
    [ '  (  ,  2  ,  3)', [null, "2", "3"]],
    [ '  (  1  ,  ,  3)', ["1", null, "3"]],
    [ '  (  1  ,  ,  "3")', ["1", null, "3"]],
    [ '  (  1  ,  2  ,)', ["1", "2", null]],
    [ '  (  1  ,  "2"  ,)', ["1", "2", null]],
    [ '  (  "1"  ,  2  ,)', ["1", "2", null]],
    [ '  (  1  ,  2  )', ["1", "2"]],
    [ '  (  "1"  ,  "2"  )', ["1", "2"]],

    [ '  (  1  ,  2  ,3  )', ["1", "2", "3"]],
    [ '  (  ,  2  ,  3  )', [null, "2", "3"]],
    [ '  (  1  ,  ,  3  )', ["1", null, "3"]],
    [ '  (  1  ,  ,  "3"  )', ["1", null, "3"]],
    [ '  (  1  ,  2  ,  )', ["1", "2", null]],
    [ '  (  1  ,  "2"  ,  )', ["1", "2", null]],
    [ '  (  "1"  ,  2  ,  )', ["1", "2", null]],
    [ '  (  1  ,  2  )  ', ["1", "2"]],
    [ '  (  "1"  ,  "2"  )  ', ["1", "2"]],

    [ '  (  1  ,  2  ,3  )  ', ["1", "2", "3"]],
    [ '  (  ,  2  ,  3  )  ', [null, "2", "3"]],
    [ '  (  1  ,  ,  3  )  ', ["1", null, "3"]],
    [ '  (  1  ,  ,  "3"  )  ', ["1", null, "3"]],
    [ '  (  1  ,  2  ,  )  ', ["1", "2", null]],
    [ '  (  1  ,  "2"  ,  )  ', ["1", "2", null]],
    [ '  (  "1"  ,  2  ,  )  ', ["1", "2", null]],

];

describe('PgOidParserUtils', () => {

    beforeAll( () => {
        PgOidParserUtils.setLogLevel(LogLevel.NONE);
    });

    describe('#parseRecord', () => {

        CORRECT_PAIRS.forEach((pair) => {
            const [input, output] = pair;
            it(`can parse ${JSON.stringify(input)} as ${JSON.stringify(output)}`, () => {
                expect( PgOidParserUtils.parseRecord(input) ).toStrictEqual(output);
            });
        });

    });

});
